/**  cantolang.canto
 *
 *   Official web site for the Canto programming language.
 *
 *
 **/

site poetic_programming {

    adopt content_handler

    /-------- global values -----------------------/

    global User_Table(utbl{}){} = utbl
    global Admin_User_Table(atbl{}){} = atbl

    /-------- initialization ----------------------/

    init {
        load_users("users", "admins");
    }
    
    session_init {
    }

    load_users(ufilename, afilename) {
        file user_file = file(ufilename)
        file admin_file = file(afilename)
        
        dynamic table_loader(str){} = table.parse(str)
        
        log("looking for user file " + user_file.canonical_path + " and admin file " + admin_file.canonical_path);
        
        if (!user_file.exists) {
            log("user file not found; aborting");
            redirect error("User file " + ufilename + " not found.")

        } else if (!admin_file.exists) {
            log("admin file not found; aborting");
            redirect error("Admin file " + afilename + " not found.")

        } else {
            eval(User_Table(table_loader(user_file.contents)));
            eval(Admin_User_Table(table_loader(admin_file.contents)));
        }
        
        if (!User_Table) {
            redirect error("Invalid user file " + ufilename + ".")
        }
        if (!Admin_User_Table) {
            redirect error("Invalid admin file " + afilename + ".")
        }
    }
    
    /-------- error handling ----------------------/

    component error(msg) {
        component_class = "error_msg"
        message = msg
        
        "Error: ";
        msg;
    }


    /-------- login status and information --------/

    this_username(u) = u

    boolean logged_in(boolean flag) = flag

    dynamic boolean authenticate(username, password) {
        if (User_Table[username] == password) {
            eval(this_username(: username :));
            true;
        } else {
            false;
        }
    }

    dynamic boolean authenticate_admin(username) {
        if (Admin_User_Table[username]) {
            true;
        } else {
            false;
        }
    }

    /-------- session status ---------------------/


    /-------- log file ---------------------------/

    static LOG_FILE = "poetic_programmimg.log"

    /-------- parameter constants ----------------/
    
    static USERNAME_PARAM = "user"
    static PASSWORD_PARAM = "pass"

    /-------- styles and appearance constants -----/

    static SPLASH_LOGO = "images/noun_quill_592016_000000.png"
    static HEADER_LOGO = "images/noun_quill_592016_000000.png"
    
    /** pixels **/    
    static int HEADER_LOGO_WIDTH = 300
    static int HEADER_LOGO_HEIGHT = 300
    
    /** rems **/
    static float HEADER_HEIGHT = 8.25 
    static int HEADER_MIN_WIDTH = 28
    static int MENU_WIDTH = 13
    static int CONTENT_MIN_WIDTH = 14

    color main_bgcolor = "white"

    /-------- common user interface ---------------/

    menu_style [|    
        .menu_box {
            background-color: #614722;
            opacity: 0.5;
            color: #EEEEEE;
            margin: 0;
            padding: 0 1rem;
            width: 100%;
        }

        .menu_box li {
            float: left;
            display: inline;
            padding: 0.25rem 1rem;
            margin: 0;
        }
        
        .menu_box ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
            overflow: hidden;
        }
       
        .menu_box a {
            text-decoration: none;
        }    
        
        .submenu_box {
            padding-left: 1.2rem;    
        }

        .menu_item {
            display: block;
            font-weight: bold;
            font-size: 1.1rem;
            font-family: "Arial", sans-serif;
        }

        .submenu_item {
            font-weight: bold;
            font-size: 1rem;
            font-family: "Arial", sans-serif;
        }
        
        .submenu_header {
            font-weight: bold;
            font-size: 1.2rem;
            font-family: "Arial", sans-serif;
            color: #D5D5D7;
        }

        .selected_item {
            color: #FFFFAA;
        }

        .unselected_item {
            color: #D5DEE7;
        }
        
        .menu_box a:hover {
            color: #FFFFFF;
        }
    |]

    dynamic component menu_box(selected_page, menu_item[] menu_items),
                              (selected_page, menu_item[] menu_items, boolean is_submenu) {

        component_class = (is_submenu ? "submenu_box" : "menu_box")

        [| <ul> |]
        for menu_item m in menu_items {
            [| <li> |]
            m.show(selected_page);
            [| </li> |]
        }
        [| </ul> |]
    }

    dynamic menu_item(base_page p) {
        base_page pg = p
        item_class = "menu_item"
        
        dynamic show(selected_page_name) {
            [| <a class=" |]
            item_class;
            if (selected_page_name == pg.type) {
                 " selected_item";
            } else { 
                " unselected_item";
            }
            [| " href="/ |]
            pg.type;
            [| "> |]
            pg.label;
            [| </a> |]
        }    
    }    

    dynamic menu_item(*) submenu(label, menu_item[] sub_items) {
        item_class = "submenu"
        
        menu_item[] submenu_items = sub_items

        dynamic show(selected_page_name) {
            [| <span class="submenu_header"> |]
            label;
            [| </span> |]
            menu_box(selected_page_name, submenu_items, true);
        }
    }


    dynamic menu_item[] main_menu = [ menu_item(index),
                                      submenu("A Tour of Canto", [
                                          menu_item(quick_tour_page),
                                          menu_item(leisurely_tour_page),
                                          menu_item(backstory_page)
                                      ]),
                                      menu_item(docs),
                                      menu_item(download) ]

    dynamic menu_item[] header_menu = [ menu_item(index),
                                        menu_item(quick_tour_page),
                                        menu_item(docs),
                                        menu_item(download),
                                        menu_item(about) ]


    float side_box_width = 14
    media_queries {
    
        int narrow_max = HEADER_MIN_WIDTH   
      
        /--- narrow ---/
          
        [| @media (max-width: {= narrow_max; =}rem) {
               .page_wrapper {
                   width: 100%;
                   padding: 0;
               }
               .header_box {
                   width: 100%;
               }
               .side_box {
                   width: 100%;
               }
               .content_body {
                   width: 96%;
                   padding: 2%;
               }
               .content_body ul {
                   padding-left: 1rem;
               }
           }
        |]
        
    
        /--- wide ---/    
    
        [| @media (min-width: {= narrow_max; =}rem) {
               .page_wrapper {
                   width: 100%;
                   padding: 0;
               }
               .side_box {
                   position: fixed;
                   float: left;
                   width: {= (side_box_width - 4.5); =}rem;
                   margin: 0 0.5rem 0 0;
                   padding: 5rem 3rem 1rem 1rem;
               }
               .content_body {
                   width: 100%;
               }
               .content_header_box {
                   margin-left: {= side_box_width; =}rem;
               }
               .main_panel {
                   margin-left: {= side_box_width; =}rem;
               }
               
           }
        |]
    }

    /-------- useful display objects --------------/

    serializable(*) quote(quote_text, quote_author) {
        keep: text = quote_text
        keep: author = quote_author
        this;
    }
    
    dynamic quote_slide(quote q) {
        [| <p><i> |]
        q.text;
        [| </i></p> |]
        if (q.author) {
            [| <p><b> |]
            q.author;
            [| </b></p> |]
        }
    }

    /-------- base styles -------------------------/

    main_style [| 
        html, body { 
            height: 100%;
            margin: 0 0 0 0;
            background-color: {= main_bgcolor; =};
            font-family: "Arial", sans-serif;
            font-size: 100%;
        }
        
        code, pre {
            font-family: "Lucida Console", Monaco, monospace
        }

        .page_wrapper {
            padding: 1rem 0;
            background-color: #EAEAEF;
            width: 100%;
            min-height: 100%;
            overflow: hidden;
        }
        
        .viewer_container {
            width: 100%;
            height: 100%;
        }
        
        .header_box {
            position: fixed;
            padding: 0;
            margin: 0;
            height: {= HEADER_HEIGHT; =}rem;
            width: 100%;
        }
        
        .content_box {
            margin-top: {= HEADER_HEIGHT; =}rem;
        }

        .header_bar {
            background-color: #F7F1BC;
            color: #555555;
            text-align: left;
            padding: 0 1rem;
            width: 100%;
        }

        .header_bar div {
            vertical-align: text-bottom;
            display: inline-block;
        }

        .header_bar h1 {
            color: #338888;
            font-size: 1.25rem;
            font-family: "Arial Black", Gadget, sans-serif
            font-weight: bold;
            padding-left: 2rem;
        }

        .header_bar img {
            width: {= HEADER_LOGO_WIDTH; =}px;
            height: {= HEADER_LOGO_HEIGHT; =}px;
            vertical-align: middle;
        }

        .side_box {
            background-color: #EFEDE1;
            height: 100%;
        }
        
        .footer_box {
            clear: both;
        }
        
        .content_header_box_wrapper {
            width: 100%;
            max-width: 64rem;
        }
        
        .content_header_box {
            text-align: center;
            background-color: white;
        }
            
        .content_main_points li {
            display: block;
            padding: 0.5rem 1rem;
        }
    
        .content_main_points ul {
            padding: 0;
            margin: 0;
            list-style-type: square;
        }

        .content_body {
            max-width: 64rem;
        }

        .main_panel {
            background-color: white;
            color: black;
            padding: 1rem;
            font-size: 0.95rem;
            line-height: 1.5;
        }
        
        .main_panel pre {
            background-color: #DEE3EE;
            color: #0000CC; 
            margin: 0 1rem 1rem 0;
            padding: 1rem;
            font-size: 0.9rem;
        }

        .main_panel code {
            color: #0000CC; 
            font-size: 0.9rem;
        }
        
        .content_panel {
            width: 40rem;
            padding: 1.5rem;
            color: #88FFAA;
            z-index: 100;
            background: rgba(31, 31, 31, 0.75);
        }

        .main_point {
            color: #003388;
            background-color: white;
            font-size: 1.25rem;
            padding: 0.25rem;
            list-style-type: square;
        }
        
        .main_point_body {
            overflow: hidden;
            transition: transform 0.67s ease-in-out, height 0.67s ease-in-out;
        }

        .active, .main_point_span:hover {
            background-color: gold; 
        }
        
        .point_closed {
            height: 0;
        }

        .point_open {
            height: 100%;
        }
        
        .two_columns {
            display: flex;
        }
        
        .two_columns ul {
            margin: 0;
        }

        .two_columns li {
            color: blue;
            font-weight: bold;
        }

        .two_columns p {
            margin-top: 0.5rem;
            margin-bottom: 0.5rem;
            padding-right: 1.5rem;
        }

        .two_columns a {
            display: block;
            font-weight: bold;
            font-style: italic;
            margin-bottom: 1rem;
        }

        .column {
            flex: 50%;
        }

        @keyframes slideshow {
            10% {
                opacity: 0;
            }
            20% {
                opacity: 1;
            }
            80% {
                opacity: 1;
            }
            90% {
                opacity: 0;
            }
        }

        .slide {
            position: absolute;
            transition: opacity 1.5s;
            opacity: 0;
        }
        
        .centered_container {
            width: 100%;
            height: 100%;
            margin: 0 0 0 0;
            position: relative;
        }
        
        .centered_high_box {
            position: absolute;
            left: 50%;
            top: 38%;
            margin-right: -50%;
            transform: translate(-50%, -50%);
            width: 36rem;
        }
        
        .centered_div  {
            width: 100%;
            text-align: center;
         }
        
       .labeled_edit {
            text-align: center;
            font-weight: bold;
            padding:0.5rem;
        }

        #splash_image_holder img {
            display: block;
            margin-left: auto;
            margin-right: auto;
        }
        
        #login_splash_box {
            color: white;
            font-size: 1rem;
            font-weight: bold;
            font-family: "Arial", sans-serif;
        }
        
        #login_button {
            width: 10rem;
        }
        
        #ok_button {
            width: 10rem;
        }

        #cancel_button {
            width: 10rem;
        }
        
        #tc_container {
            width: 100%;
            height: 100%;
        }
        
        #tc {
            width: 100%;
            height: 100%;
        }
        
        h1 {
            color: blue;
            font-size: 1.25rem;
            font-family: Impact, Charcoal, sans-serif
            font-weight: bold;
        }
        
        h2 {
            color: #777777;
            font-size: 1rem;
            font-family: "Arial Black", Gadget, sans-serif
            font-weight: bold;
        }
        
        {= media_queries; =}
    |]        

    /-------- base page ---------------------------/
    page(*) base_page(params{}) {
        boolean ajax_enabled = true
    
        boolean needs_login [?]    
        boolean needs_admin = false
        
        label [?]
        
       style {
            main_style;
            menu_style;
        }

        component splash_image_holder(img_url) {
            id = "splash_image_holder"
            [| <img src="{= img_url; =}"> |]
        }
        
        dynamic component login_splash_box {
            id = "login_splash_box"
            component_class = "centered_container"
            
            [| <div class="centered_high_box"> |]
            splash_image_holder(SPLASH_LOGO);
            login_component(page_name);
            [| </div> |]
        }
        

        component side_box {
            component_class = "side_box"
            side_box_content;
        }
        
        
        side_box_content {
        }


        component header_bar {
            component_class = "header_bar"
            
            [| <div><img src="{= HEADER_LOGO; =}"></div> |]
            [| <div><h1>A Language<br>for Imaginitive Programming</h1></div> |]
        }
        

        base_page this_page = owner
        page_name = owner.type

        log("constructing base_page, page_name is " + page_name);
        if (needs_login && !logged_in) {
            log("needs login");
            login_splash_box;

        } else if (!needs_admin || authenticate_admin(this_username)) {
            log("we're good");
            [| <div class="page_wrapper"><div class="header_box"> |]
            header_bar;
            menu_box(page_name, header_menu);
            [| </div><div class="content_box"> |]
            side_box;
            [| <div class="content_header_box_wrapper"> |]
            content_header_box;
            [| </div><div class="content_body"><div class="main_panel"> |]
            sub;
            [| </div></div></div> |] 
            footer_box(page_name, footer_menu);
            with (bg_scene) {
                tc(bg_scene);
            }

        } else {
            log("access to " + page_name + " by " + this_username + " denied");
            "Access denied.";
        }   
    
    }


    /-------- login mechanics ---------------------/

    public dynamic component login_component(params{}),(page_name) {
        goto_page = page_name ? page_name : goto_param
        goto_param {= with (params) {= params["goto"]; =} else [| index |] =}
        component this_component = owner
        field_ids[] = [ USERNAME_PARAM, PASSWORD_PARAM ]
        submit_params{} = { "goto": goto_page } 
        
        
        log(" login component params: " + params);
        log(" login submit params: " + submit_params);
        
        if (params[USERNAME_PARAM]) {
            log("trying to authenticate " + params[USERNAME_PARAM]);
            eval(logged_in(: authenticate(params[USERNAME_PARAM], params[PASSWORD_PARAM]) :)); 
        }
        if (logged_in) {
            log("logged in, redirecting to " + goto_page);
            redirect (goto_page)

        } else {
            [| <div class="centered_div"><table><tr> |]
            if (params[USERNAME_PARAM]) [|
                <td colspan="2" style="background-color: white; color: red; text-align: center;">Login unsuccessful.  Try again.</td>
            |] else [|
                <td colospan="2">&nbsp;</td>
            |]
            [| </tr><tr><td><table><tr><td>Username:</td><td> |]
            textedit(USERNAME_PARAM, this_username, 20);
            [| </td></tr><tr><td>Password:</td><td> |]
            passwordedit(PASSWORD_PARAM, "", 20);
            [| </td></tr></table> |]
            [| </td><td> |]
            submit_button("login", "Login", "/" + this_component.id, field_ids, submit_params);
            [| </td></tr></table></div> |]
        }
        
    }    

    component content_header_box {
        component_class = "content_header_box"
    }

    component footer_box {
        component_class = "footer_box"
    }

    dynamic main_item(item_page ip) {
        [| <li> |]
        ip.label;
        [| </li><p> |]
        ip.summary;
        [| </p><a href=" |]
        ip.type;
        [| ">Learn more</a> |]
    }


    /-------- home page ---------------------------/

    public base_page(*) index(params{}) {
        boolean needs_login = false    

        label = "Home"

 
    }

    base_page item_page {
        boolean needs_login = false;    
        title = label
        summary [?]
        
        [| <h2> |]
        title;
        [| </h2> |]
        
        sub;
    }
    

      
    /-------- overview page --------------------------/

    current_article(article_key) = article_key


    /** The list of available articles.  This is the canonical source of article
     *  availability; other sources of article information, such as the article
     *  lookup table, are constructed from this list.
     **/
    global article[] all_articles = [ quick_tour_article, leisurely_tour_article, backstory_article ]

    /** Lookup table for articles.  Keyed on article key. **/
    global article{} article_table = { for article a in all_articles { a.key: a } }
    
    article overview_article(doc_name, article_name) {
        title = article_name
        key = doc_name
        content = include_content(doc_name)
    }

    global article quick_tour_article = overview_article("quick_tour", "Quick Tour");
    global article leisurely_tour_article = overview_article("leisurely_tour", "Leisurely Tour");
    global article backstory_article = overview_article("backstory", "Backstage Tour")
    global article poetic_programming_article = overview_article("poetic_programming_manifesto", "Poetic Programming");

    public base_page quick_tour_page = article_page(quick_tour_article) 
    public base_page leisurely_tour_page = article_page(leisurely_tour_article) 
    public base_page backstory_page = article_page(backstory_article)
    public base_page poetic_programming_page = article_page(poetic_programming_article)



    dynamic public base_page article_page(article a) {
        boolean needs_login = false    

        label = a.title
    
        show_article(a);
    }

   
    public base_page(*) overview(params{}) {
        boolean needs_login = false    

        label = "A Tour of Canto"

        article_param = params["article"]
        
        static DEFAULT_ARTICLE = "quick_tour"

        if (article_param) {
            eval(current_article(: article_param :));
        } else if (!current_article) {
            eval(current_article(: DEFAULT_ARTICLE :));
        }
        log("current article is " + current_article); 
        
        show_article(article_table[current_article]); 

    }

    dynamic include_content(doc_name) {
        include_file(file_base + "/docs/" + doc_name + ".md");
    }



    /-------- docs page ---------------------------/

    public base_page(*) docs(params{}) {
        boolean needs_login = false    

        label = "Documentation"
        
        [| <h1>Canto Documentation</h1> |]
        
        
    }
    
    /-------- download page -----------------------/

    public base_page(*) download(params{}) {
        boolean needs_login = false    

        label = "Download"
    }
    
    /-------- about page -----------------------/

    public base_page(*) about(params{}) {
        boolean needs_login = false    

        label = "About"
    }
    
    /-------- examples page -----------------------/

    public base_page(*) examples(params{}) {
        boolean needs_login = false    

        label = "Examples"
    }
    
    public base_page show_logs {
        boolean needs_login = true
        boolean needs_admin = true

        [| <h3>fundev.log</h3><pre> |]
        include_file(LOG_FILE);
        [| </pre> |]
    }



    /-------- error page --------------------------/
    public page error_page(request r) {
        boolean needs_login = false    
        title = [| Error |]
        color bgcolor = "#EEDDAA"

        error_div(r);        
    }    

}
