/**  cantolang.canto
 *
 *   Official web site for the Canto programming language.
 *
 *
 **/

site poetic_programming {

    adopt content_handler

    /-------- global values -----------------------/

    global User_Table(utbl{}){} = utbl
    global Admin_User_Table(atbl{}){} = atbl

    /-------- initialization ----------------------/

    init {
        load_users("users", "admins");
    }
    
    session_init {
    }

    load_users(ufilename, afilename) {
        file user_file = file(ufilename)
        file admin_file = file(afilename)
        
        dynamic table_loader(str){} = table.parse(str)
        
        log("looking for user file " + user_file.canonical_path + " and admin file " + admin_file.canonical_path);
        
        if (!user_file.exists) {
            log("user file not found; aborting");
            redirect error("User file " + ufilename + " not found.")

        } else if (!admin_file.exists) {
            log("admin file not found; aborting");
            redirect error("Admin file " + afilename + " not found.")

        } else {
            eval(User_Table(table_loader(user_file.contents)));
            eval(Admin_User_Table(table_loader(admin_file.contents)));
        }
        
        if (!User_Table) {
            redirect error("Invalid user file " + ufilename + ".")
        }
        if (!Admin_User_Table) {
            redirect error("Invalid admin file " + afilename + ".")
        }
    }
    
    /-------- error handling ----------------------/

    component error(msg) {
        component_class = "error_msg"
        message = msg
        
        "Error: ";
        msg;
    }


    /-------- login status and information --------/

    this_username(u) = u

    boolean logged_in(boolean flag) = flag

    dynamic boolean authenticate(username, password) {
        if (User_Table[username] == password) {
            eval(this_username(: username :));
            true;
        } else {
            false;
        }
    }

    dynamic boolean authenticate_admin(username) {
        if (Admin_User_Table[username]) {
            true;
        } else {
            false;
        }
    }

    /-------- session status ---------------------/


    /-------- log file ---------------------------/

    static LOG_FILE = "poetic_programmimg.log"

    /-------- parameter constants ----------------/
    
    static USERNAME_PARAM = "user"
    static PASSWORD_PARAM = "pass"

    /-------- styles and appearance constants -----/

    static SPLASH_LOGO = "images/poetic_programming-800x160.png"
    static HEADER_LOGO = "images/poetic_programming-800x160.png"
    static SIDEBOX_LOGO = "images/noun_quill_120x120.png"
    
    /** pixels **/    
    static int HEADER_LOGO_WIDTH = 800
    static int HEADER_LOGO_HEIGHT = 160
    
    /** rems **/
    static float HEADER_HEIGHT = 0
    static int HEADER_MIN_WIDTH = 28
    static int MENU_WIDTH = 13
    static int CONTENT_MIN_WIDTH = 14

    color main_bgcolor = "#E7FFFF"

    /-------- common user interface ---------------/

    menu_style [|    
        .menu_box {
            background-color: #614722;
            opacity: 0.5;
            color: #EEEEEE;
            margin: 0;
            padding: 0 1rem;
            width: 100%;
        }

        .menu_box li {
            float: left;
            display: inline;
            padding: 0.25rem 1rem;
            margin: 0;
        }
        
        .menu_box ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
            overflow: hidden;
        }
       
        .menu_box a {
            text-decoration: none;
        }    
        
        .submenu_box {
            padding-left: 1.2rem;    
        }

        .menu_item {
            display: block;
            font-weight: bold;
            font-size: 1.1rem;
            font-family: "Arial", sans-serif;
        }

        .submenu_item {
            font-weight: bold;
            font-size: 1rem;
            font-family: "Arial", sans-serif;
        }
        
        .submenu_header {
            font-weight: bold;
            font-size: 1.2rem;
            font-family: "Arial", sans-serif;
            color: #D5D5D7;
        }

        .selected_item {
            color: #FFFFAA;
        }

        .unselected_item {
            color: #D5DEE7;
        }
        
        .menu_box a:hover {
            color: #FFFFFF;
        }
    |]

    dynamic component menu_box(selected_page, menu_item[] menu_items),
                              (selected_page, menu_item[] menu_items, boolean is_submenu) {

        component_class = (is_submenu ? "submenu_box" : "menu_box")

        [| <ul> |]
        for menu_item m in menu_items {
            [| <li> |]
            m.show(selected_page);
            [| </li> |]
        }
        [| </ul> |]
    }

    dynamic menu_item(base_page p) {
        base_page pg = p
        item_class = "menu_item"
        
        dynamic show(selected_page_name) {
            [| <a class=" |]
            item_class;
            if (selected_page_name == pg.type) {
                 " selected_item";
            } else { 
                " unselected_item";
            }
            [| " href="/ |]
            pg.type;
            [| "> |]
            pg.label;
            [| </a> |]
        }    
    }    

    dynamic menu_item(*) submenu(label, menu_item[] sub_items) {
        item_class = "submenu"
        
        menu_item[] submenu_items = sub_items

        dynamic show(selected_page_name) {
            [| <span class="submenu_header"> |]
            label;
            [| </span> |]
            menu_box(selected_page_name, submenu_items, true);
        }
    }

    float side_box_width = 12.5
    media_queries {
    
        int narrow_max = HEADER_MIN_WIDTH   
      
        /--- narrow ---/
          
        [| @media (max-width: {= narrow_max; =}rem) {
               .page_wrapper {
                   width: 100%;
                   padding: 0;
               }
               .header_box {
                   width: 100%;
               }
               .side_box {
                   width: 100%;
                   align: bottom;
               }
               .content_body {
                   width: 96%;
                   padding: 2%;
               }
               .content_body ul {
                   padding-left: 1rem;
               }
               .content_side_box {
                   display: none;
               }
           }
        |]
        
    
        /--- wide ---/    
    
        [| @media (min-width: {= narrow_max; =}rem) {
               .page_wrapper {
                   width: 100%;
                   padding: 0;
               }
               .side_box {
                   position: fixed;
                   float: left;
                   width: {= (side_box_width - 1); =}rem;
                   height: 100%;
                   margin: 0 0 0 0;
                   padding: 1rem 1.5rem 1rem 1.5rem;
               }
               .content_body {
                   width: 100%;
                   max-width: {= (66 - side_box_width); =}rem;
                   margin-left: {= (side_box_width + 1.5); =}rem;
               }
               .content_header_box {
                   margin-left: {= side_box_width; =}rem;
               }
               .content_side_box {
                   position: absolute;
               }
           }
        |]
    }


    /-------- base styles -------------------------/

    main_style [| 
        html, body { 
            height: 100%;
            margin: 0 0 0 0;
            background-color: {= main_bgcolor; =};
            font-family: "Arial", sans-serif;
            font-size: 100%;
        }
        
        code, pre {
            font-family: "Lucida Console", Monaco, monospace
        }

        .page_wrapper {
            padding: 1rem 0;
            width: 100%;
            min-height: 100%;
            overflow: hidden;
            background-color: {= main_bgcolor; =};
        }
        
        .viewer_container {
            width: 100%;
            height: 100%;
        }
        
        .header_box {
            padding: 0;
            margin: 0 0 2rem 0;
            text-align: center;
            width: 100%;
        }
        
        .content_box {
            margin-top: {= HEADER_HEIGHT; =}rem;
        }

        .header_bar {
            background-color: darkslategray;
            color: white;
            text-align: left;
            padding: 0 1rem 0 2rem;
            width: 100%;
        }

        .header_bar div {
            vertical-align: text-bottom;
            display: inline-block;
        }

        .header_bar h1 {
            color: gold;
            font-size: 2.5rem;
            font-family: "Courier New", "Tlwg Mono", "Courier", "Lucida Typewriter", monospace;
            padding-left: 2rem;
            line-height: 2rem;
        }

        .header_bar h2 {
            color: silver;
            font-size: 2.5rem;
            font-family: "Courier New", "Tlwg Mono", "Courier", "Lucida Typewriter", monospace;
            padding-left: 2rem;
            line-height: 2rem;
        }

        .header_bar img {
            width: {= HEADER_LOGO_WIDTH; =}px;
            height: {= HEADER_LOGO_HEIGHT; =}px;
            vertical-align: middle;
        }

        .side_box {
            background-color: palegoldenrod;
        }
        
        .footer_box {
            clear: both;
        }
        
        .content_header_box_wrapper {
            width: 100%;
            max-width: 64rem;
        }
        
        .content_header_box {
            text-align: center;
            background-color: white;
        }
            
        .content_main_points li {
            color: darkslategray;
            font-size: 1.1rem;
            font-weight: bold;
            padding-bottom: 1rem;
        }
    
        .content_main_points ul {
            padding-left: 8rem;
            padding-right: 1rem;
            margin: 0;
            list-style-type: square;
        }

        .content_side_box {
            padding: 0.5rem;
            background-color: slategray;
        }

        .content_side_box h3 {
            color: silver;
            font-size: 1.75rem;
            font-weight: bold;
        }

        .main_panel {
            color: black;
            background-color: white;
            padding: 2rem;
            font-size: 0.95rem;
            line-height: 1.5;
        }
        
        .main_panel pre {
            background-color: #DEE3EE;
            color: #0000CC; 
            margin: 0 1rem 1rem 0;
            padding: 1rem;
            font-size: 0.9rem;
        }

        .main_panel code {
            color: #0000CC; 
            font-size: 0.9rem;
        }
        
        .content_panel {
            width: 40rem;
            padding: 1.5rem;
            color: #88FFAA;
        }

        .main_point {
            color: #003388;
            background-color: white;
            font-size: 1.25rem;
            padding: 0.25rem;
            list-style-type: square;
        }
        
        .main_point_body {
            overflow: hidden;
            transition: transform 0.67s ease-in-out, height 0.67s ease-in-out;
        }

        .active, .main_point_span:hover {
            background-color: gold; 
        }
        
        .point_closed {
            height: 0;
        }

        .point_open {
            height: 100%;
        }
        
        .two_columns {
            display: flex;
        }
        
        .two_columns ul {
            margin: 0;
        }

        .two_columns li {
            color: blue;
            font-weight: bold;
        }

        .two_columns p {
            margin-top: 0.5rem;
            margin-bottom: 0.5rem;
            padding-right: 1.5rem;
        }

        .two_columns a {
            display: block;
            font-weight: bold;
            font-style: italic;
            margin-bottom: 1rem;
        }

        .column {
            flex: 50%;
        }

        @keyframes slideshow {
            10% {
                opacity: 0;
            }
            20% {
                opacity: 1;
            }
            80% {
                opacity: 1;
            }
            90% {
                opacity: 0;
            }
        }

        .slide {
            width: {= (side_box_width - 2); =}rem;
            position: absolute;
            transition: opacity 1.5s;
            opacity: 0;
        }
        
        .centered_container {
            width: 100%;
            height: 100%;
            margin: 0 0 0 0;
            position: relative;
        }
        
        .centered_high_box {
            position: absolute;
            left: 50%;
            top: 38%;
            margin-right: -50%;
            transform: translate(-50%, -50%);
            width: 36rem;
        }
        
        .centered_div  {
            width: 100%;
            text-align: center;
         }
        
       .labeled_edit {
            text-align: center;
            font-weight: bold;
            padding:0.5rem;
        }

        #splash_image_holder img {
            display: block;
            margin-left: auto;
            margin-right: auto;
        }
        
        #login_splash_box {
            color: white;
            font-size: 1rem;
            font-weight: bold;
            font-family: "Arial", sans-serif;
        }
        
        #login_button {
            width: 10rem;
        }
        
        #ok_button {
            width: 10rem;
        }

        #cancel_button {
            width: 10rem;
        }
        
        #tc_container {
            width: 100%;
            height: 100%;
        }
        
        #tc {
            width: 100%;
            height: 100%;
        }
        
        h1 {
            color: blue;
            font-size: 1.25rem;
            font-family: Impact, Charcoal, sans-serif
            font-weight: bold;
        }
        
        h2 {
            color: #777777;
            font-size: 1rem;
            font-family: "Arial Black", Gadget, sans-serif
            font-weight: bold;
        }
        
        {= media_queries; =}
    |]        

    /-------- quote mechanism ---------------------/

    serializable(*) quote(quote_text, quote_author) {
        keep: text = quote_text
        keep: author = quote_author
        this;
    }
    
    dynamic quote_slide(quote q) {
        [| <p><i> |]
        q.text;
        [| </i></p> |]
        if (q.author) {
            [| <p><b> |]
            q.author;
            [| </b></p> |]
        }
    }

    /-------- quotes to show on main page ---------/

    quote[] main_quotes = [
        quote([| A program is, above all, a form of human communication.  A 
                 program can't just work; it must explain itself.  It must
                 telegraph its intentions and wear its strategy on its sleeve.
                 It must have a voice. |], null),

        quote([| It's much easier to make beautiful-but-slow code fast than it is
                 to make fast-but-ugly code beautiful. |], "Tim Bray"),

        quote([| Any fool can write code that a computer can understand. Good
                 programmers write code that humans can understand. |], "Martin Fowler"),

        quote([| Einstein argued that there must be simplified explanations of
                 nature, because God is not capricious or arbitrary. No such
                 faith comforts the software engineer. |], "Fred Brooks"),

        quote([| If it's hard to fond a simple name for a variable or method that
                 creates a clear image of the underlying object, that's a hint that
                 the underlying object may not have a clean design. |],
              "John Ousterhout"),

        quote([| There are two ways of constructing a software design: One way is
                 to make it so simple that there are obviously no deficiencies.  And
                 the other way is to make it so complicated that there are no obvious
                 deficiencies. |], "C.A.R. Hoare"),

        quote([| The enjoyment of one's tools is an essential ingredient of
                 successful work. |], "Donald Knuth"),

        quote([| Even if aesthetics are not the mathematics of beauty, they are
                 the proof of the calculation. |], "Franz Grillparzer"),

        quote([| A sentence should contain no unnecessary words, a paragraph no 
                 unnecessary sentences, for the same reason that a drawing should 
                 have no unnecessary lines and a machine no unnecessary parts. |],
              "William Strunk, Jr."),

        quote([| The world is filled with frameworks that are a little too hard
                 to understand and look like they have a bit too much investment
                 in them. |], "Michael Feathers"),

        quote([| Code is just a smart kind of data -- data designed to trigger
                 processors into performing certain useful or amusing acts. |],
              "Charles Petzold"),

        quote([| Controlling complexity is the essence of computer programming. |],
              "Brian Kernighan"),

        quote([| Static typing where possible, dynamic typing when needed! |],
              "Erik Meijer and Peter Drayton")

        ]

    /-------- base page ---------------------------/
    page(*) base_page(params{}) {
        boolean ajax_enabled = true
    
        boolean needs_login [?]    
        boolean needs_admin = false
        title = "Poetic Programming: A Manifesto"
        
        label [?]
        
        style {
            main_style;
            menu_style;
        }

        component splash_image_holder(img_url) {
            id = "splash_image_holder"
            [| <img src="{= img_url; =}"> |]
        }
        
        dynamic component login_splash_box {
            id = "login_splash_box"
            component_class = "centered_container"
            
            [| <div class="centered_high_box"> |]
            splash_image_holder(SPLASH_LOGO);
            login_component(page_name);
            [| </div> |]
        }
        

        component side_box {
            component_class = "side_box"
            
            header_box;
            side_box_content;
        }
        
        component header_box {
            component_class = "header_box"
            
            [| <div><img src="{= SIDEBOX_LOGO; =}"></div> |]
        }
        
        
        side_box_content {
            slide_show(main_slides);
        }

        dynamic slide_show(slides[]) {
            for slide in slides and int i from 1 {
                [| <div class="slide" id="slide{= i; =}"> |]
                slide;
                [| </div> |]
            }
            [| <script> |]
            slide_script(slides.count);            
            [| </script> |]
        }

        dynamic javascript slide_script(int numslides) [|
            var ns = {= numslides; =};
            var cs = 1;

            var startslide = document.getElementById("slide1");
            startslide.style.opacity = 1;
            setInterval(function () {
                var oldslide = document.getElementById("slide" + cs);
                if (cs == ns) {
                    cs = 1;
                } else {
                    cs++;
                }
                var newslide = document.getElementById("slide" + cs);

                oldslide.style.opacity = 0;
                newslide.style.opacity = 1;
            }, 7000); 
        |]

        main_slides[] = [ for quote q in main_quotes { quote_slide(q) } ]

        component header_bar {
            component_class = "header_bar"
            
            [| <div><h1>Poetic Programming:</h1><h2>A Manifesto</h2></div> |]
        }
        
        component content_header_box {
            component_class = "content_header_box"
            header_bar;
        }

        base_page this_page = owner
        page_name = owner.type

        log("constructing base_page, page_name is " + page_name);
        if (needs_login && !logged_in) {
            log("needs login");
            login_splash_box;

        } else if (!needs_admin || authenticate_admin(this_username)) {
            [| <div class="page_wrapper"><div class="content_box"> |]
            side_box;
            [| <div class="content_header_box_wrapper"> |]
            content_header_box;
            [| </div><div class="content_body"><div class="main_panel"> |]
            sub;
            [| </div></div></div> |] 
            footer_box(page_name, footer_menu);
 
        } else {
            log("access to " + page_name + " by " + this_username + " denied");
            "Access denied.";
        }   
    
    }


    /-------- login mechanics ---------------------/

    public dynamic component login_component(params{}),(page_name) {
        goto_page = page_name ? page_name : goto_param
        goto_param {= with (params) {= params["goto"]; =} else [| index |] =}
        component this_component = owner
        field_ids[] = [ USERNAME_PARAM, PASSWORD_PARAM ]
        submit_params{} = { "goto": goto_page } 
        
        if (params[USERNAME_PARAM]) {
            log("trying to authenticate " + params[USERNAME_PARAM]);
            eval(logged_in(: authenticate(params[USERNAME_PARAM], params[PASSWORD_PARAM]) :)); 
        }
        if (logged_in) {
            log("logged in, redirecting to " + goto_page);
            redirect (goto_page)

        } else {
            [| <div class="centered_div"><table><tr> |]
            if (params[USERNAME_PARAM]) [|
                <td colspan="2" style="background-color: white; color: red; text-align: center;">Login unsuccessful.  Try again.</td>
            |] else [|
                <td colospan="2">&nbsp;</td>
            |]
            [| </tr><tr><td><table><tr><td>Username:</td><td> |]
            textedit(USERNAME_PARAM, this_username, 20);
            [| </td></tr><tr><td>Password:</td><td> |]
            passwordedit(PASSWORD_PARAM, "", 20);
            [| </td></tr></table> |]
            [| </td><td> |]
            submit_button("login", "Login", "/" + this_component.id, field_ids, submit_params);
            [| </td></tr></table></div> |]
        }
        
    }    

    component footer_box {
        component_class = "footer_box"
    }

    dynamic main_item(item_page ip) {
        [| <li> |]
        ip.label;
        [| </li><p> |]
        ip.summary;
        [| </p><a href=" |]
        ip.type;
        [| ">Learn more</a> |]
    }


    /-------- home page ---------------------------/

    public base_page(*) index(params{}) {
        boolean needs_login = false    
        label = "Home"

        [| <div class="content_side_box">
           <h3>TL;DR</h3>
           </div>
           <div class="content_main_points">
           <ul>
           <li>Like bad prose, many programs are big, ugly, and complicated.</li>
           <li>Like good poetry, programs should be short, beautiful, and full 
           of meaning.</li>
           <li>Programming is writing. These are truths, not metaphors.</li>
           </ul> 
           <p>Programming is a kind of writing.  The primary purpose of writing 
           is communication, and programming is no exception.  The first goal of
           any program is to communicate what it does, how it does it, and why.
           Without this a program is unmaintainable and therefore close to useless.
           </p> 
           
           <p>Standard programming practices often neglect this key fact, leading to 
           programs that are too complicated and too hard to understand.  Poetic 
           Programming addresses this problem by encouraging approaches that put
           poetic values -- <strong>economy, richness, and beauty</strong> -- at the 
           forefront.  This realignment of concerns encourages programmers to 
           de-emphasize the aspects of a program that increase complexity without 
           contributing to meaning (frameworks, for example) and focus on those
           aspects that relate most closely to the problem domain.
           </p>
           </div>
           <div class="main_link"><a href="manifesto">READ THE MANIFESTO</a></div>
        |]
    }


    dynamic include_content(doc_name) {
        include_file(file_base + "/docs/" + doc_name + ".md");
    }



    public base_page(*) manifesto(params{}) {
        boolean needs_login = false;    
        label = "The Manifesto"
        content = include_content("poetic_programming_manifesto");

        show_content(content);
    }


    base_page item_page {
        boolean needs_login = false;    
        title = label
        summary [?]
        
        [| <h2> |]
        title;
        [| </h2> |]
        
        sub;
    }
    



    /-------- error page --------------------------/
    public page error_page(request r) {
        boolean needs_login = false    
        title = [| Error |]
        color bgcolor = "#EEDDAA"

        error_div(r);        
    }    

}
