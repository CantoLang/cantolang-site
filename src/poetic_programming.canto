/**  cantolang.canto
 *
 *   Official web site for the Canto programming language.
 *
 *
 **/

site poetic_programming {

    adopt content_handler

    /-------- global values -----------------------/

    global User_Table(utbl{}){} = utbl
    global Admin_User_Table(atbl{}){} = atbl
    
    /-------- initialization ----------------------/

    init {
        load_users("users", "admins");
    }
    
    session_init {
    }

    load_users(ufilename, afilename) {
        file user_file = file(ufilename)
        file admin_file = file(afilename)
        
        dynamic table_loader(str){} = table.parse(str)
        
        log("looking for user file " + user_file.canonical_path + " and admin file " + admin_file.canonical_path);
        
        if (!user_file.exists) {
            log("user file not found; aborting");
            redirect error("User file " + ufilename + " not found.")

        } else if (!admin_file.exists) {
            log("admin file not found; aborting");
            redirect error("Admin file " + afilename + " not found.")

        } else {
            eval(User_Table(table_loader(user_file.contents)));
            eval(Admin_User_Table(table_loader(admin_file.contents)));
        }
        
        if (!User_Table) {
            redirect error("Invalid user file " + ufilename + ".")
        }
        if (!Admin_User_Table) {
            redirect error("Invalid admin file " + afilename + ".")
        }
    }
    
    /-------- error handling ----------------------/

    component error(msg) {
        component_class = "error_msg"
        message = msg
        
        "Error: ";
        msg;
    }


    /-------- login status and information --------/

    this_username(u) = u

    boolean logged_in(boolean flag) = flag

    dynamic boolean authenticate(username, password) {
        if (User_Table[username] == password) {
            eval(this_username(: username :));
            true;
        } else {
            false;
        }
    }

    dynamic boolean authenticate_admin(username) {
        if (Admin_User_Table[username]) {
            true;
        } else {
            false;
        }
    }

    /-------- session status ---------------------/


    /-------- log file ---------------------------/

    static LOG_FILE = "poetic_programmimg.log"

    /-------- parameter constants ----------------/
    
    static USERNAME_PARAM = "user"
    static PASSWORD_PARAM = "pass"

    /-------- styles and appearance constants -----/

    static SPLASH_LOGO = "images/poetic_programming-800x160.png"
    static HEADER_LOGO = "images/poetic_programming-800x160.png"
    static SIDEBOX_LOGO = "images/noun_quill_120x120.png"
    
    /** pixels **/    
    static int HEADER_LOGO_WIDTH = 800
    static int HEADER_LOGO_HEIGHT = 160
    
    /** rems **/
    static float HEADER_HEIGHT = 0
    static int HEADER_MIN_WIDTH = 28
    static int MENU_WIDTH = 13
    static int CONTENT_MIN_WIDTH = 14

    color main_bgcolor = "#EFEFEF"

    /-------- common user interface ---------------/

    menu_style [|    
        .menu_box {
            background-color: #614722;
            opacity: 0.5;
            color: #EEEEEE;
            margin: 0;
            padding: 0 1rem;
            width: 100%;
        }

        .menu_box li {
            float: left;
            display: inline;
            padding: 0.25rem 1rem;
            margin: 0;
        }
        
        .menu_box ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
            overflow: hidden;
        }
       
        .menu_box a {
            text-decoration: none;
        }    
        
        .submenu_box {
            padding-left: 1.2rem;    
        }

        .menu_item {
            display: block;
            font-weight: bold;
            font-size: 1.1rem;
            font-family: "Arial", sans-serif;
        }

        .submenu_item {
            font-weight: bold;
            font-size: 1rem;
            font-family: "Arial", sans-serif;
        }
        
        .submenu_header {
            font-weight: bold;
            font-size: 1.2rem;
            font-family: "Arial", sans-serif;
            color: #D5D5D7;
        }

        .selected_item {
            color: #FFFFAA;
        }

        .unselected_item {
            color: #D5DEE7;
        }
        
        .menu_box a:hover {
            color: #FFFFFF;
        }
    |]

    dynamic component menu_box(selected_page, menu_item[] menu_items),
                              (selected_page, menu_item[] menu_items, boolean is_submenu) {

        component_class = (is_submenu ? "submenu_box" : "menu_box")

        [| <ul> |]
        for menu_item m in menu_items {
            [| <li> |]
            m.show(selected_page);
            [| </li> |]
        }
        [| </ul> |]
    }

    dynamic menu_item(base_page p) {
        base_page pg = p
        item_class = "menu_item"
        
        dynamic show(selected_page_name) {
            [| <a class=" |]
            item_class;
            if (selected_page_name == pg.type) {
                 " selected_item";
            } else { 
                " unselected_item";
            }
            [| " href="/ |]
            pg.type;
            [| "> |]
            pg.label;
            [| </a> |]
        }    
    }    

    dynamic menu_item(*) submenu(label, menu_item[] sub_items) {
        item_class = "submenu"
        
        menu_item[] submenu_items = sub_items

        dynamic show(selected_page_name) {
            [| <span class="submenu_header"> |]
            label;
            [| </span> |]
            menu_box(selected_page_name, submenu_items, true);
        }
    }

    float side_box_width = 12.5
    media_queries {
    
        int narrow_max = HEADER_MIN_WIDTH   
      
        /--- narrow ---/
          
        [| @media (max-width: {= narrow_max; =}rem) {
               html {
                   font-size: 120%;
               }
               .page_wrapper {
                   width: 100%;
                   padding: 0;
               }
               .header_box {
                   width: 100%;
               }
               .side_box {
                   display: none;
               }
               .content_header_box_wrapper {
                   width: 96%;
                   padding: 2%;
               }
               .content_body {
                   width: 96%;
                   padding: 2%;
               }
               .content_body ul {
                   padding-left: 1rem;
               }
               .content_side_box {
                   display: none;
               }
               .content_main_points ul {
                   padding-left: 0.5rem;
                   padding-right: 0.5rem;
               }
           }
        |]
        
    
        /--- wide ---/    
    
        [| @media (min-width: {= narrow_max; =}rem) {
               html {
                   font-size: 100%;
               }
               .page_wrapper {
                   width: 100%;
                   padding: 0;
               }
               .side_box {
                   position: fixed;
                   float: left;
                   width: {= (side_box_width - 1); =}rem;
                   height: 100%;
                   margin: 0 0 0 0;
                   padding: 1rem 1.5rem 1rem 1.5rem;
               }
               .content_body {
                   max-width: {= (66 - side_box_width); =}rem;
                   margin-left: {= (side_box_width + 1.5); =}rem;
               }
               .content_header_box_wrapper {
                   width: 100%;
                   max-width: {= (66 - side_box_width); =}rem;
                   margin-left: {= (side_box_width + 1.5); =}rem;
               }
               .content_side_box {
                   position: absolute;
               }
               .content_main_points ul {
                   padding-left: 8.5rem;
                   padding-right: 8.5rem;
               }
           }
        |]
    }


    /-------- base styles -------------------------/

    main_style [| 
        html, body { 
            height: 100%;
            margin: 0 0 0 0;
            background-color: {= main_bgcolor; =};
            font-family: "Arial", sans-serif;
        }
        
        code, pre {
            font-family: "Lucida Console", Monaco, monospace
        }

        .page_wrapper {
            padding: 1rem 0;
            width: 100%;
            min-height: 100%;
            overflow: hidden;
            background-color: {= main_bgcolor; =};
        }
        
        .viewer_container {
            width: 100%;
            height: 100%;
        }
        
        .header_box {
            padding: 0;
            margin: 0 0 2rem 0;
            text-align: center;
            width: 100%;
        }
        
        .content_box {
            margin-top: {= HEADER_HEIGHT; =}rem;
        }

        .header_bar {
            background-color: darkslategray;
            color: white;
            text-align: left;
            width: 100%;
        }

        .header_bar div {
            vertical-align: text-bottom;
            display: inline-block;
        }

        .header_bar h1 {
            color: gold;
            font-size: 2.5rem;
            font-family: "Courier New", "Tlwg Mono", "Courier", "Lucida Typewriter", monospace;
            padding-left: 2rem;
            line-height: 2rem;
        }

        .header_bar h2 {
            color: silver;
            font-size: 2.5rem;
            font-family: "Courier New", "Tlwg Mono", "Courier", "Lucida Typewriter", monospace;
            padding-left: 2rem;
            line-height: 2rem;
        }

        .header_bar img {
            width: {= HEADER_LOGO_WIDTH; =}px;
            height: {= HEADER_LOGO_HEIGHT; =}px;
            vertical-align: middle;
        }

        .side_box {
            background-color: palegoldenrod;
        }
        
        .footer_box {
            clear: both;
        }
        
        .content_header_box {
            text-align: center;
            background-color: white;
        }
            
        .content_main_points li {
            color: darkslategray;
            font-size: 1.1rem;
            font-weight: bold;
            padding-bottom: 1rem;
        }
    
        .content_main_points ul {
            margin: 0;
            list-style-type: square;
        }

        .content_main_body {
            color: black;
            font-size: 1rem;
        }
    
        .content_side_box_xxx {
            padding: 0.5rem;
            background-color: slategray;
        }

        .content_side_box {
            color: silver;
            font-size: 1.75rem;
            font-weight: bold;
            line-height: 2.5;
        }

        .main_panel {
            color: black;
            background-color: white;
            padding: 2rem;
            font-size: 0.95rem;
            line-height: 1.25;
        }
        
        .main_panel pre {
            background-color: #DEE3EE;
            color: #0000CC; 
            margin: 0 1rem 1rem 0;
            padding: 1rem;
            font-size: 0.9rem;
        }

        .main_panel code {
            color: #0000CC; 
            font-size: 0.9rem;
        }
        
        .content_panel {
            width: 40rem;
            padding: 1.5rem;
            color: #88FFAA;
        }

        .main_point {
            color: #003388;
            background-color: white;
            font-size: 1.25rem;
            padding: 0.25rem;
            list-style-type: square;
        }
        
        .main_point_body {
            overflow: hidden;
            transition: transform 0.67s ease-in-out, height 0.67s ease-in-out;
        }

        .active, .main_point_span:hover {
            background-color: gold; 
        }
        
        .point_closed {
            height: 0;
        }

        .point_open {
            height: 100%;
        }
        
        .two_columns {
            display: flex;
        }
        
        .two_columns ul {
            margin: 0;
        }

        .two_columns li {
            color: blue;
            font-weight: bold;
        }

        .two_columns p {
            margin-top: 0.5rem;
            margin-bottom: 0.5rem;
            padding-right: 1.5rem;
        }

        .two_columns a {
            display: block;
            font-weight: bold;
            font-style: italic;
            margin-bottom: 1rem;
        }

        .column {
            flex: 50%;
        }

        @keyframes slideshow {
            10% {
                opacity: 0;
            }
            20% {
                opacity: 1;
            }
            80% {
                opacity: 1;
            }
            90% {
                opacity: 0;
            }
        }

        .slide_panel {
            width: {= (side_box_width - 2); =}rem;
            position: absolute;
        }

        .slide {
            transition: opacity 1.5s;
            opacity: 0;
        }
        
        .centered_container {
            width: 100%;
            height: 100%;
            margin: 0 0 0 0;
            position: relative;
        }
        
        .centered_high_box {
            position: absolute;
            left: 50%;
            top: 38%;
            margin-right: -50%;
            transform: translate(-50%, -50%);
            width: 36rem;
        }
        
        .centered_div  {
            width: 100%;
            text-align: center;
         }
        
       .labeled_edit {
            text-align: center;
            font-weight: bold;
            padding:0.5rem;
        }

        .hyphenate {
            overflow-wrap: break-word;
            word-wrap: break-word;
            -webkit-hyphens: auto;
            -moz-hyphens: auto;
            -ms-hyphens: auto;
            hyphens: auto;
        }

        #splash_image_holder img {
            display: block;
            margin-left: auto;
            margin-right: auto;
        }
        
        #login_splash_box {
            color: white;
            font-size: 1rem;
            font-weight: bold;
            font-family: "Arial", sans-serif;
        }
        
        #login_button {
            width: 10rem;
        }
        
        #ok_button {
            width: 10rem;
        }

        #cancel_button {
            width: 10rem;
        }
        
        #tc_container {
            width: 100%;
            height: 100%;
        }
        
        #tc {
            width: 100%;
            height: 100%;
        }
        
        h1 {
            color: blue;
            font-size: 1.25rem;
            font-family: Impact, Charcoal, sans-serif
            font-weight: bold;
        }
        
        #manifesto h1 {
            display: none;
        }
        
        h1 {
            color: blue;
            font-size: 1.25rem;
            font-family: Impact, Charcoal, sans-serif
            font-weight: bold;
        }

        h2 {
            color: #220099;
            font-size: 1.2rem;
            font-family: "Arial Black", Gadget, sans-serif
            font-weight: bold;
            padding-top: 1.25rem;
        }

        h3 {
            color: #446666;
            font-size: 1.05rem;
            font-family: "Arial Black", Gadget, sans-serif
            font-weight: bold;
            padding-top: 0.5rem;
        }
        
        {= media_queries; =}
    |]        

    /-------- slide mechanism ---------------------/

    serializable(*) slide(slide_text) {
        keep: text = slide_text
        this;
    }
    
    dynamic show_slide(slide s) {
        [| <p> |]
        s.text;
        [| </p> |]
    }

    /-------- slides to show on main page ---------/

    slide[] main_slides = [
        slide([| Programming is a kind of writing. |]),

        slide([| Too many programs are like bad prose: big, ugly, and complicated. |]),

        slide([| Poetic Programming wants programs to be like good poetry: concise, 
                 beautiful, and full of meaning. |]),
     
    ]



    /-------- base page ---------------------------/
    page(*) base_page(params{}) {
        boolean ajax_enabled = true
    
        boolean needs_login [?]    
        boolean needs_admin = false
        title = "Poetic Programming: A Manifesto"
        
        label [?]
        
        style {
            main_style;
            menu_style;
        }

        component splash_image_holder(img_url) {
            id = "splash_image_holder"
            [| <img src="{= img_url; =}"> |]
        }
        
        dynamic component login_splash_box {
            id = "login_splash_box"
            component_class = "centered_container"
            
            [| <div class="centered_high_box"> |]
            splash_image_holder(SPLASH_LOGO);
            login_component(page_name);
            [| </div> |]
        }
        

        component side_box {
            component_class = "side_box"
            
            header_box;
            side_box_content;
        }
        
        component header_box {
            component_class = "header_box"
            
            [| <div><img src="{= SIDEBOX_LOGO; =}"></div> |]
        }
        
        
        side_box_content {
            slide_show(main_slides);
        }

        dynamic slide_show(slide[] slides) {
            for slide s in slides and int i from 1 {
                if (i % 3 == 1) [| <div class="slide_panel"> |]
                [| <div class="slide" id="slide{= i; =}"> |]
                show_slide(s);
                [| </div> |]
                if (i % 3 == 0) [| </div> |]
            }
            [| <script> |]
            slide_script(slides.count);            
            [| </script> |]
        }

        dynamic javascript slide_script(int numslides) [|
            var ns = {= numslides; =};
            var cs = 1;

            var startslide = document.getElementById("slide1");
            startslide.style.opacity = 1;
            setInterval(function () {
                if (cs == ns) {
                    cs = 1;
                } else {
                    cs++;
                }
                var newslide = document.getElementById("slide" + cs);
                if (cs % 3 == 1) {
                    var n = (cs == 1 ? ns + 1 : cs);
                    var oldslide = document.getElementById("slide" + (n - 3));
                    oldslide.style.opacity = 0;
                    oldslide = document.getElementById("slide" + (n - 2));
                    oldslide.style.opacity = 0;
                    oldslide = document.getElementById("slide" + (n - 1));
                    oldslide.style.opacity = 0;
                }                    
                newslide.style.opacity = 1;
            }, 2333); 
        |]

        component header_bar {
            component_class = "header_bar"
            
            [| <div onclick="location.href = '/'"><h1>Poetic Programming:</h1><h2>A Manifesto</h2></div> |]
        }
        
        component content_header_box {
            component_class = "content_header_box"
            header_bar;
        }

        base_page this_page = owner
        page_name = owner.type

        log("constructing base_page, page_name is " + page_name);
        if (needs_login && !logged_in) {
            log("needs login");
            login_splash_box;

        } else if (!needs_admin || authenticate_admin(this_username)) {
            [| <div class="page_wrapper"><div class="content_box"> |]
            side_box;
            [| <div class="content_header_box_wrapper"> |]
            content_header_box;
            [| </div><div class="content_body"><div class="main_panel"> |]
            sub;
            [| </div></div></div> |] 
            footer_box(page_name, footer_menu);
 
        } else {
            log("access to " + page_name + " by " + this_username + " denied");
            "Access denied.";
        }   
    
    }


    /-------- login mechanics ---------------------/

    public dynamic component login_component(params{}),(page_name) {
        goto_page = page_name ? page_name : goto_param
        goto_param {= with (params) {= params["goto"]; =} else [| index |] =}
        component this_component = owner
        field_ids[] = [ USERNAME_PARAM, PASSWORD_PARAM ]
        submit_params{} = { "goto": goto_page } 
        
        if (params[USERNAME_PARAM]) {
            log("trying to authenticate " + params[USERNAME_PARAM]);
            eval(logged_in(: authenticate(params[USERNAME_PARAM], params[PASSWORD_PARAM]) :)); 
        }
        if (logged_in) {
            log("logged in, redirecting to " + goto_page);
            redirect (goto_page)

        } else {
            [| <div class="centered_div"><table><tr> |]
            if (params[USERNAME_PARAM]) [|
                <td colspan="2" style="background-color: white; color: red; text-align: center;">Login unsuccessful.  Try again.</td>
            |] else [|
                <td colospan="2">&nbsp;</td>
            |]
            [| </tr><tr><td><table><tr><td>Username:</td><td> |]
            textedit(USERNAME_PARAM, this_username, 20);
            [| </td></tr><tr><td>Password:</td><td> |]
            passwordedit(PASSWORD_PARAM, "", 20);
            [| </td></tr></table> |]
            [| </td><td> |]
            submit_button("login", "Login", "/" + this_component.id, field_ids, submit_params);
            [| </td></tr></table></div> |]
        }
        
    }    

    component footer_box {
        component_class = "footer_box"
    }

    dynamic main_item(item_page ip) {
        [| <li> |]
        ip.label;
        [| </li><p> |]
        ip.summary;
        [| </p><a href=" |]
        ip.type;
        [| ">Learn more</a> |]
    }


    /-------- home page ---------------------------/

    public base_page(*) index(params{}) {
        boolean needs_login = false    
        label = "Home"

        [| <div class="content_side_box">
           <p>TL;DR</p>
           </div>
           <div class="content_main_points">
           <ul>
           <li>Programming is a kind of writing, like prose and poetry.</li>
           
           <li>Poetry excels at communicating economically, richly, and beautifully.</li>

           <li>Programs should do the same.</li>
           </ul> 

           </div><div class="content_main_body hyphenate">
           <p>The purpose of writing is to communicate.  This includes programs, which
           should at the very least communicate <strong>what</strong> and <strong>how</strong>
           -- what the program does and and it does it. But a program can also communicate
           <strong>why</strong>, by describing the world it operates in, the motivations of
           its developers and users, and the deeper nature of the problems it's addressing.
           </p>
           <p>The better a program is at communicating how, what, and why, the more maintainable
           and adaptable it is.  Such a program is also more fun to work on -- instead of
           spending hours tracing the code and figuring out what it's doing, you can quickly
           get to the business of adding or improving features.
           </p> 
           <p>Standard programming practices tend to ignore the semantics of code, or, more
           insidiously, dilute or obscure it.
           </p>
           <p><strong>Poetic Programming</strong> addresses this problem by supporting 
           approaches that put poetic values -- <strong>economy, richness, and 
           beauty</strong> -- at the forefront.  This realignment of concerns encourages 
           programmers to de-emphasize the aspects of a program that increase complexity
           without contributing to meaning (frameworks, for example) and focus on those
           aspects that relate most closely to the problem domain.
           </p>
           </div>
           <div class="main_link"><a href="manifesto">READ THE MANIFESTO</a></div>
        |]
    }


    dynamic include_content(doc_name) {
        include_file(file_base + "/docs/" + doc_name + ".md");
    }

    global poetic_programming_manifesto {
        content = include_content("poetic_programming_manifesto");
        show_content(content);
    }


    public base_page manifesto {
        boolean needs_login = false   
        label = "The Manifesto"

        [| <div id="manifesto" class="content_main_body hyphenate"> |]
        poetic_programming_manifesto;
        [| </div> |]
    }


    base_page item_page {
        boolean needs_login = false;    
        title = label
        summary [?]
        
        [| <h2> |]
        title;
        [| </h2> |]
        
        sub;
    }
    



    /-------- error page --------------------------/
    public page error_page(request r) {
        boolean needs_login = false    
        title = [| Error |]
        color bgcolor = "#EEDDAA"

        error_div(r);        
    }    

}
